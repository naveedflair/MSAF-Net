# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rDV1EceVBQpoacWnWM3LKJkYH9Rq5Qwz
"""

import torch
import torch.optim as optim
from torch.optim.lr_scheduler import ReduceLROnPlateau
from tqdm import tqdm
from ..training.metrics import dice_coefficient, iou_score

class Trainer:
    def __init__(self, model, train_loader, val_loader, criterion, optimizer, device, scheduler=None):
        self.model = model
        self.train_loader = train_loader
        self.val_loader = val_loader
        self.criterion = criterion
        self.optimizer = optimizer
        self.device = device
        self.scheduler = scheduler

    def train_epoch(self):
        self.model.train()
        epoch_train_loss = 0.0
        epoch_train_iou = 0.0
        epoch_train_dice = 0.0

        epoch_pbar = tqdm(self.train_loader, desc='Training', position=0, leave=True)

        for images, masks in epoch_pbar:
            images, masks = images.to(self.device), masks.to(self.device)

            self.optimizer.zero_grad()
            outputs = self.model(images)
            loss = self.criterion(outputs, masks)

            loss.backward()
            self.optimizer.step()

            epoch_train_loss += loss.item() * images.size(0)

            with torch.no_grad():
                pred_binary = (outputs > 0.5).float()
                batch_iou = iou_score(pred_binary, masks).item()
                batch_dice = dice_coefficient(pred_binary, masks).item()
                epoch_train_iou += batch_iou * images.size(0)
                epoch_train_dice += batch_dice * images.size(0)

        epoch_train_loss /= len(self.train_loader.dataset)
        epoch_train_iou /= len(self.train_loader.dataset)
        epoch_train_dice /= len(self.train_loader.dataset)

        return epoch_train_loss, epoch_train_iou, epoch_train_dice

    def validate_epoch(self):
        self.model.eval()
        epoch_val_loss = 0.0
        epoch_val_iou = 0.0
        epoch_val_dice = 0.0

        with torch.no_grad():
            for images, masks in self.val_loader:
                images, masks = images.to(self.device), masks.to(self.device)

                outputs = self.model(images)
                loss = self.criterion(outputs, masks)

                epoch_val_loss += loss.item() * images.size(0)

                pred_binary = (outputs > 0.5).float()
                batch_iou = iou_score(pred_binary, masks).item()
                batch_dice = dice_coefficient(pred_binary, masks).item()
                epoch_val_iou += batch_iou * images.size(0)
                epoch_val_dice += batch_dice * images.size(0)

        epoch_val_loss /= len(self.val_loader.dataset)
        epoch_val_iou /= len(self.val_loader.dataset)
        epoch_val_dice /= len(self.val_loader.dataset)

        return epoch_val_loss, epoch_val_iou, epoch_val_dice

    def train(self, num_epochs):
        train_losses, val_losses = [], []
        train_ious, val_ious = [], []
        train_dices, val_dices = [], []

        for epoch in range(num_epochs):
            train_loss, train_iou, train_dice = self.train_epoch()
            val_loss, val_iou, val_dice = self.validate_epoch()

            train_losses.append(train_loss)
            train_ious.append(train_iou)
            train_dices.append(train_dice)
            val_losses.append(val_loss)
            val_ious.append(val_iou)
            val_dices.append(val_dice)

            print(f"Epoch {epoch + 1}/{num_epochs}:")
            print(f"Train Loss: {train_loss:.4f}, Train Dice: {train_dice:.4f}, Train IoU: {train_iou:.4f}")
            print(f"Val Loss: {val_loss:.4f}, Val Dice: {val_dice:.4f}, Val IoU: {val_iou:.4f}")

            if self.scheduler:
                self.scheduler.step(val_loss)

        return train_losses, val_losses, train_ious, val_ious, train_dices, val_dices