# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rDV1EceVBQpoacWnWM3LKJkYH9Rq5Qwz
"""

import torch.nn as nn
import torch

class BoundaryAwareLoss(nn.Module):
    def __init__(self, dice_weight=0.5, boundary_weight=0.5):
        super(BoundaryAwareLoss, self).__init__()
        self.dice_weight = dice_weight
        self.boundary_weight = boundary_weight
        self.bce_loss = nn.BCELoss()

    def forward(self, outputs, targets):
        outputs = torch.clamp(outputs, min=1e-7, max=1-1e-7)
        targets = torch.clamp(targets, min=0, max=1)

        dice_loss = 1 - dice_coefficient(outputs, targets)
        bce_loss = self.bce_loss(outputs, targets)

        total_loss = self.dice_weight * dice_loss + self.boundary_weight * bce_loss
        return total_loss